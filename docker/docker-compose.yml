version: '3.7'

# IPv6 support is broken, see https://github.com/docker/compose/issues/4958, so we need to use "network_mode: host"

services:

# ==================================================================================================================== #
# MQTT(SN)-based software                                                                                              #
# ==================================================================================================================== #

  mqtt2http:
    build: mqtt2http
    container_name: mqtt2http
    restart: always
    network_mode: host
    volumes:
      - ./mqtt2http/kafka.truststore.pem:/opt/mqtt2http/kafka.truststore.pem
      - ./mqtt2http/mqtt2http.keystore.pem:/opt/mqtt2http/mqtt2http.keystore.pem
    environment:
#      MQTT_BROKER_HOST: mosquitto
      MQTT_BROKER_HOST: localhost
      MQTT_BROKER_PORT: 1883
      HTTP_HOST: localhost
#      HTTP_HOST: rest-proxy
    env_file:
      - .env.mqtt2http.dev
    depends_on:
      - mosquitto

  mosquitto:
    image: eclipse-mosquitto:2.0.14
    container_name: mosquitto
    restart: always
    network_mode: host
#    hostname: mosquitto
#    ports:
#      - "1883:1883"
    volumes:
      - ./mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf

  paho-mqttsn-gateway-ipv4:
    build:
      context: paho.mqtt-sn.embedded-c
      args:
        SENSOR_NETWORK: udp
        GATEWAY_ID: 4
        GATEWAY_NAME: PahoGateway-IPv4
        BROKER_NAME: mosquitto
    container_name: paho-mqttsn-gateway-ipv4
    restart: always
    ports:
      - "10004:10004/udp"
    depends_on:
      - mosquitto

  paho-mqttsn-gateway-ipv6:
    build:
      context: paho.mqtt-sn.embedded-c
      args:
        SENSOR_NETWORK: udp6
        GATEWAY_ID: 6
        GATEWAY_NAME: PahoGateway-IPv6
        BROKER_NAME: 127.0.0.1
    container_name: paho-mqttsn-gateway-ipv6
    restart: always
#    ports:
#      - "10006:10006/udp"
    network_mode: host # for IPv6
    depends_on:
      - mosquitto


# ==================================================================================================================== #
# CoAP-based software                                                                                                  #
# ==================================================================================================================== #

  californium:
    build: californium
    container_name: californium
    restart: always
    command: java -jar /opt/californium/cf-proxy2.jar ExampleCrossProxy2
    network_mode: host # for IPv6
#    sysctls:
#      - "net.ipv6.conf.all.disable_ipv6=0"
#    ports:
#      - "5683:5683"
    volumes:
      - ./californium/californium.keystore.jks:/opt/californium/californium.keystore.jks
      - ./truststore.jks:/opt/californium/truststore.jks
      - ./californium/patches:/opt/californium/patches
    environment:
      SSL_KEYSTORE_LOCATION: /opt/californium/californium.keystore.jks
    env_file:
      - .env.californium.dev

  californium-secure:
    build: californium
    container_name: californium-secure
    restart: always
    command: java -jar /opt/californium/cf-proxy2.jar ExampleCrossProxy2 secure
    network_mode: host # for IPv6
#        sysctls:
#          - "net.ipv6.conf.all.disable_ipv6=0"
#        ports:
#          - "5684:5684"
    volumes:
      - ./californium/californium.keystore.jks:/opt/californium/californium.keystore.jks
      - ./truststore.jks:/opt/californium/truststore.jks
      - ./californium/patches:/opt/californium/patches
    environment:
      SSL_KEYSTORE_LOCATION: /opt/californium/californium.keystore.jks
    env_file:
      - .env.californium.dev


# ==================================================================================================================== #
# Kafka services (using confluent platform)                                                                            #
# Based on https://raw.githubusercontent.com/confluentinc/cp-all-in-one/7.0.1-post/cp-all-in-one/docker-compose.yml    #
# ==================================================================================================================== #

  kafka-zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    restart: always
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka-broker:
    image: confluentinc/cp-kafka:7.0.1
    container_name: broker
    restart: always
    hostname: broker
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
    depends_on:
      - kafka-zookeeper

  kafka-schema-registry:
    image: confluentinc/cp-schema-registry:7.0.1
    container_name: schema-registry
    restart: always
    hostname: schema-registry
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    depends_on:
      - kafka-broker

  kafka-rest-proxy:
    image: confluentinc/cp-kafka-rest:7.0.1
    container_name: rest-proxy
    restart: always
    hostname: rest-proxy
    ports:
      - "8084:8084"
    volumes:
      - ./kafka/kafka.keystore.jks:/opt/kafka/kafka.keystore.jks
      - ./truststore.jks:/opt/kafka/truststore.jks
    environment:
      KAFKA_REST_HOST_NAME: rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: 'broker:29092'
      KAFKA_REST_LISTENERS: "https://0.0.0.0:8084"
      KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      KAFKA_REST_SSL_KEYSTORE_LOCATION: /opt/kafka/kafka.keystore.jks
      KAFKA_REST_SSL_TRUSTSTORE_LOCATION: /opt/kafka/truststore.jks
      KAFKA_REST_SSL_CLIENT_AUTHENTICATION: REQUIRED
    env_file:
      - .env.kafka-rest-proxy.dev
    depends_on:
      - kafka-schema-registry
      - kafka-broker


# ==================================================================================================================== #
# Kafka consumer application                                                                                           #
# ==================================================================================================================== #

#  kafka-consumer:
#    build: mqtt2http
#    container_name: mqtt2http
#    restart: always
#    volumes:
#      - ./mqtt2http/kafka.truststore.pem:/opt/mqtt2http/kafka.truststore.pem
#      - ./mqtt2http/mqtt2http.keystore.pem:/opt/mqtt2http/mqtt2http.keystore.pem
#    environment:
#      MQTT_BROKER_HOST: mosquitto
#      MQTT_BROKER_PORT: 1883
#      HTTP_HOST: rest-proxy
#    env_file:
#      - .env.mqtt2http.dev
#    depends_on:
#      - mosquitto

# ==================================================================================================================== #
# Example django backend                                                                                               #
# ==================================================================================================================== #

  django-web:
    build: example_backend
    container_name: django-web
    restart: always
#    command: python manage.py runsslserver [::1]:8000 # change to "0.0.0.0:8000" for IPv4
    command: python manage.py runserver [::1]:8000 # change to "0.0.0.0:8000" for IPv4
    network_mode: host # for IPv6
    volumes:
      - ./example_backend/:/usr/src/example_backend/
    hostname: django-web
#    ports:
#      - "8000:8000"
    env_file:
      - .env.django.dev
    depends_on:
      - django-db

  django-db:
    image: postgis/postgis:13-3.1-alpine
    container_name: django-db
    restart: always
    volumes:
      - django_postgres_data:/var/lib/postgresql/data/
    hostname: django-db
    ports:
      - "5432:5432"
    env_file:
      - .env.django.db.dev


# ==================================================================================================================== #
# Local Kubernetes Test Cluster                                                                                        #
# ==================================================================================================================== #




# ==================================================================================================================== #
# Volumes                                                                                                              #
# ==================================================================================================================== #

volumes:
  django_postgres_data:


